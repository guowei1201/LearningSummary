
1.数据库是长期存储在计算机内有组织、大量、共享的数据集合
数据库可分为哪三种模型：层次，关系，网状

2.关系数据模型的三个要素：
数据结构，关系操作，完整性约束

3.
数据库的核心和基础是数据模型（两大类：概念模型 、 逻辑和物理模型）

4.三级模式：外模式，模式，内模式
两级映像：外模式-模式映像（逻辑独立性） 和 模式-内模式映像（物理独立性）

5.产生数据不一致的根本原因是：
数据冗余

6.
DBS:{ OS\DBMS（DB->D）\DBA\数据库设计人员\用户\硬件~~~~~}

7.在数据库中存储的是：数据以及数据库之间的联系

8.数据库设计
a.需求分析阶段
b.概念结构设计阶段：通过对用户需求进行综合、归纳与抽象，形成一个独立于具体数据库管理系统的概念模型.
{ER图，三类冲突：属性冲突（属性域冲突，属性取值单位冲突），命名冲突（同名异义，异名同义），结构冲突}
c.逻辑结构设计阶段：将ER图转换为与选用数据库管理系统产品所支持的数据模型相符合的逻辑结构.
d.物理结构设计：为一个给定的逻辑结构模型选取一个最适合应用要求的物理结构的过程。
e.数据库的实施阶段
f.数据库运行和维护阶段


9.关系代数运算中，五种基本运算为：
选择、投影、并、差、笛卡尔积

10. 
SELECT  count(Sname)  学生人数
FROM Student；（重复的也算，NULL不算）

SELECT  count(*)（以元组个数记数，NULL也算）

11.集合操作
并操作(UNION)
交操作(INTERSECT)
差操作(EXCEPT)

12
SELECT [ALL|DISTINCT]  
   <目标列表达式> [别名] [ ，<目标列表达式> [别名]] …
FROM     <表名或视图名> [别名] [ ，<表名或视图名> [别名]] …
 [WHERE <条件表达式>]
 [GROUP BY <列名1>[，<列名1’>] ...
[HAVING     <条件表达式>]]
[ORDER BY <列名2> [ASC|DESC]  [，<列名2’> [ASC|DESC] ] …  ]；



---------------------------------------------------------------------------------------------------------------------------
存储过程
*
create proc deletestudent
@s varchar
As
Begin 
   Delete from graduation where 学号 = @s
end


**
create procedure myproc
@xuehao char(9)
@average int out
as
begin 
   select @average = avg(grade)
   from sc
   where sno = @xuehao
end
declare @savg  int
set @savg = 0
exec myproc "2017012003",@savg out
print @savg

//////////////////////////////////////////////////////////////////////////////////////
函数
   create function FunBook(@name varchar)
   Returns table
   AS
      return Select 图书.*
      from 图书，图书类别
      where 图书.类别代号 = 图书类别.类别代号 and 类别名 = @name

**
   create function FunBookSale (@bookno varchar)
   returns  int
   as
      begin
       return  select  sum（数量） from 订单 where 书号=@bookno
      end
 ***
 CREATE FUNCTION whichgeneration(@birthday datetime)
   RETURNS VARCHAR(12)
   AS
   BEGIN
      if year(@birthday)<1980
      return “too old”;
      else if year(@birthday)<1990
      return “80s”;
      else 
          return “90s”;
   END
 //////////////////////////////////////////////////////////////////////////////////////
游标
declare @salary int ,@cno int
--声明游标
declare salary_cursor cursor 
for 
   select 工资，员工编号
   from 员工工资表
for read only 
open salary_cursor
fetch next from salary_cursor
into @salary ,@cno
--循环处理
while @@FETCH_STATUS = 0
begin
   if @salary > 3000
   begin 
   update 员工工资表 set 个人所得税 = （@salary - 3000）*0.1 where 员工编号 = @cno
   end
   fetch next from salary_cursor into @salary ,@cno
 end
 --关闭游标
 close salary_cursor
 deallocate salary_cursor
 ****************************************************************************************

触发器
CREATE TRIGGER TrInsUpd
ON  图书 
BEFORE INSERT,UPDATE
AS 
BEGIN
   DECLARE @dh int;
	SELECT @dh=inserted.类别代号 from inserted
	IF (not exists(select 类别代号 from 图书类别 where 类别代号=@dh)) 
	BEGIN
	   RAISERROR (‘类别编号不存在', 16, 1)
	   ROLLBACK TRANSACTION
	END 
END




数据库恢复技术
1.事务 transaction
commit  ROLLBACK

****************************************************************
DBMS将理解为   3  个事务：（隐式）
Select * from student

Update student
Set sdept='IS'
Where sno='201215121'

Update student
Set sdept='CS'
Where sno='201215125'
****************************************************************
DBMS将理解为   2 个事务：（显式）
Select * from student
Begin transaction
    Update student
    Set sdept='IS'
    Where sno='201215121'

    Update student
    Set sdept='CS'
    Where sno='201215125'
COMMIT
****************************************************************



2.事务的ACID特性
原子性               一致性               隔离性             持久性
Atomicity          Consistency         Isolation           Durability


3.故障种类
----------------------------------------------------------------------------
 *  事务内部的故障 
事务内部更多的故障是非预期的，是不能由应用程序处理的
预算溢出，并发事务发生死锁而别选中撤销该事务，违反了某些完整性限制等（非预期的故障）
恢复：撤销事务（UNDO）


----------------------------------------------------------------------------
*  系统故障
发生故障时，事务未提交（强行撤销UNDO所有未完成事务）
发生系统故障时，事务已提交，但缓冲区中的信息尚未完全写回到磁盘上（重做REDO所有已提交的事务）


----------------------------------------------------------------------------
* 介质故障 * 计算机病毒


4.转储（状态：静态转储，动态转储    ********   转存方式：海量转储，增量转储）



////写日志文件操作：把表示这个修改的日志记录写到日志文件
////写数据库操作：把对数据的修改写到数据库中
5.为什么要先写日志文件
写数据库和写日志文件是两个不同的操作
在这两个操作之间可能发生故障
如果先写了数据库修改，而在日志文件中没有登记下这个修改，则以后就无法恢复这个修改了
如果先写日志，但没有修改数据库，按日志文件恢复时只不过是多执行一次不必要的UNDO操作，并不会影响数据库的正确性。


6.恢复策略
=======事务故障：由恢复子系统应利用日志文件撤销UNDO此事务已对数据库进行的修改事务故障的恢复由系统自动完成，对用户是透明的，不需要用户干预
（反向扫描日志文件，逆操作直至读到此事务的开始标记）

=======系统故障：未完成事务对数据库的更新已写入数据库，已提交事务对数据库的更新还停留在缓冲区没来得及写入数据库
（UNDO故障发生时未完成的事务，REDO已完成的事务）系统故障的恢复由系统在重新启动时自动完成，不需要用户干预
a.正向扫描日志文件：
重做（REDO）队列，在故障发生前已经提交的事务 这些事务既有BEGIN TRANSACTION记录，也有COMMIT记录
撤销（UNDO）队列，故障发生时尚未完成的事务 这些事务只有BEGIN TRANSACTION记录，无相应的COMMIT记录
b.对撤销（UNDO）队列事务进行UNDO(撤销)处理
反向扫描日志文件，对每个UNDO事务的更新操作执行逆操作.即将日志记录中“更新前的值”写入数据库 
c. 对重做(Redo)队列事务进行重做(REDO)处理
正向扫描日志文件，对每个REDO事务重新执行登记的操作.即将日志记录中“更新后的值”写入数据库

========介质故障：
装入最新的后备数据库副本(离故障发生时刻最近的转储副本) ，使数据库恢复到最近一次转储时的一致性状态
对于静态转储的数据库副本，装入后数据库即处于一致性状态
对于动态转储的数据库副本，还须同时装入转储时刻的日志文件副本，利用与恢复系统故障的方法（即REDO+UNDO），才能将数据库恢复到一致性状态




视图
create view name
as
select ----
from 
where

视图能够简化用户的操作
视图使用户能以多种角度看待同一数据
视图对重构数据库提供了一定程度的逻辑独立性
视图能够对机密数据提供安全保护
适当的利用视图可以更清晰的表达查询
























