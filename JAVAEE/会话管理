Web应用程序基于HTTP协议
HTTP基于请求/响应模式
所有请求都是相互独立的，无连续性的
HTTP是无连接的协议
限制每次连接只处理一个请求
HTTP是无状态的协议
协议对于事务处理没有记忆能力


会话就是一个客户端连续不断地和服务器端进行请求/响应的一系列交互
多次请求间建立关联的方式称为会话管理，或会话跟踪，会话状态（指服务器与浏览器在会话过程中产生的状态信息）
会话可简单理解为：用户开一个浏览器，点击多个超链接，访问服务器多个web资源，然后关闭浏览器，整个过程称之为一个会话。
使用Cookie、隐藏域、URL重写实现会话管理


浏览器一般只允许存放300个Cookie，每个站点最多存放20个Cookie，每个Cookie的大小限制为4KB。
大多数浏览器支持最大为 4096 字节（4Kb）的 Cookie。
************************************************************************************************************************
创建Cookie对象
调用Cookie的构造方法，给出Cookie的名称和Cookie的值，二者都是字符串
Cookie c = new Cookie(“userName”,”a1234”)
设置最大时效
如果要告诉浏览器将Cookie存储到磁盘上，而非仅保存在内存中，使用setMaxAge方法(参数为秒数)
c.setMaxAge(60*60*24*7)//一周(正数)
将Cookie放入到HTTP响应中
使用response.addCookie(c)
如没有这一步，将不会有任何Cookie被发送到浏览器

调用request.getCookies
得到Cookie对象组成的数组
循环数组，调用每个对象的getName找到想要的cookie
根据应用程序调用getValue方法使用这个Cookie

Cookie[] cookies = request.getCookies();
if(cookies != null){
	for(Cookie cookie : cookies){
             if("userId".equals(cookie.getName())){
		//doSomethingWith(cookie.getValue());	       }
	}
}
        getMaxAge()/setMaxAge()
        读取/设置Cookie到期时间(秒)
        如果值为0，表示删除对应的Cookie
        如果值为负数，表示Cookie只适用于当前的浏览会话
        默认值为-1
        getName()
        读取Cookie的名称。不存在setName方法
        getValue()/setValue()
        读取/设置与Cookie关联的值
        如果重新设置了某Cookie的值，需要用addCookie()方法将其发送回去
        
        
Cookie的有效期限，预设是关闭浏览器之后Cookie就失效。
优点
可配置到期规则，数据可持久保存
不需要服务器资源，数据保存在客户端
简单性，基于文本的Key-Value对
缺点
大小受到限制(总数300;20/站点;4KB/Cookie)
用户可禁用客户端接收Cookie的功能
潜在的安全风险
************************************************************************************************************************

Sesson会话管理的原理和技术实现
登录时：创建Session对象并设置相关属性
HttpSession session = req.getSession();
session.setAttribute("userName",userName);

再次访问时,获取Session对象和相关属性
HttpSession session = req.getSession();
String user = (String)session.getAttibute("userName");
默认在关闭浏览器前,所得Session都是相同实例

removeAttribute()
移除与名称关联的值


根据需要关闭会话
session.invalidate();
通常客户端不提供结束会话的通知，而是Servlet容器在用户处于一段非活动期后就会自动的使会话失效——这个时间段称为会话的超时期
经常把Java里提供的javax.servlet.http.HttpSession简称为session










