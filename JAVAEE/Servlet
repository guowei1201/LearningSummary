Servlet
======

<servlet>
  <servlet-name>Hello</servlet-name>  --别名
  <servlet-class>xx.xx.Hello</servlet-class> --Servlet类文件
</servlet>

<servlet-mapping>
  <servlet-name>Hello</servlet-name>
  <url-pattern>/hello</url-pattern>  --虚拟路径
</servlet-mapping>
http://localhost:8080/MyWebsite/hello
先通过/hello 找到<servlet-mapping>中 Hello 再找到和它名字一样的<servlet> Hello，从而找到资源xx.xx.Hello




<url-pattern>标签的匹配方式
-----完整URL /HelloServlet
-----/目录/* 方式，以/目录作为开头的URL
-----/*.ext 以.ext结尾的地址



getParameter()方法
***href="RegistServlet?userName=zs”
****表单中name属性的获取
    <form action = "hello">
      <input type="text" name = "text" value="information">
      <input type= "submit" value = "submit">
    </form>
    
Attribute
  setAttibute():设置参数    request.setAttribute("attr","attribute");
  getAttibute() :获取某个参数的值  request.getAttribute("attr");

request.setCharacterEncoding("utf-8");
response.setContentType("text/html;charset=utf-8");

PrintWriter  writer = response.getWriter();
writer.write("内容");



请求转发:
request.getRequestDispatcher("targetURL").forward(request,response);
请求重定向
response.sendRedirect("targetURL");
本质
  请求重定向：二次请求
  请求转发：一次请求
速度
  请求转发 >请求重定向
Attribute参数
  请求转发可共享参数
  请求重定向不可共享参数
 
 
Servlet什么时候实例化
<load-on-startup>节点进行设置
当值为0或者大于0时，表示容器在应用启动时就加载这个servlet，当是一个负数时或者没有指定时，指示该servlet被选择时才加载。


Servlet对init方法的调用
config.getInitParameter(Param)可取得web.xml中的参数
ServletConfig包含Web程序部署描述符(web.xml)中定义的参数
ServletConfig是由Servlet容器实例化
Servlet实例化的同时实例化对应的ServletConfig对象，并传入到init(ServletConfig config)
      <servlet>
        <servlet-name>Hello</servlet-name>  --别名
        <servlet-class>xx.xx.Hello</servlet-class> --Servlet类文件
        <init-param>
            <param-name>name</param-name>
            <param-value>gw</param-value>
        </init-param>
      </servlet>
ServletConfig config = getServletConfig();
String name = config.getInitParameter("name");






Servlet生命周期四个阶段
-----加载和实例化：由Servlet容器完成
-----初始化：实例化Servlet后会调用init方法
-----处理客户请求：service方法（doGet或doPost）
-----销毁：销毁之前会调用destroy方法

每个Web应用启动后，Servlet容器都会创建唯一的一个ServletContext对象，该对象包含整个Web程序的信息
在自己定义的Servlet中，可以通过getServletContext()方法获得ServletContext对象
getServletContext()是在GenericServlet类中定义的
示例：读取<context-param>内的数据
<context-param>
 <param-name>context</param-name>
 <param-value>application</param-value>
</context-param>
ServletContext context = getServletContext();
String app = context.getInitParameter("context");


1. set/getAttribute()，应用于request与request之间（请求转发）
2. getParameter()，应用于客户端页面与Servlet之间（参数来自于Html、JSP）
3. getServletConfig(). getInitParameter(“param”)，应用于同一个Servlet对象
4. getServletContext(). getInitParameter(“param”)，应用于整个Web应用范围




web.xml与@WebServlet注解
@webServlet(name = "***",urlPatterns="/first"
,loadOnStartup = 1
,initParams = {@webInitParam(name = "name",value="gw")}
)

























